1. In this lesson, you created a middleware function called asyncWrapper. Why?
The asyncWrapper middleware function was created to handle errors in asynchronous functions without 
using try-catch blocks explicitly in each route handler. This middleware allows us to catch errors 
and pass them to the error-handling middleware automatically, leading to cleaner and more readable code.


2. Suppose that you want to make sure that both a status code and an error message are sent back to the user 
when they request the URL for a task that does not exist. 
Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. 
Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(new CustomAPIError(`No task with id: ${taskID}`, 404));
  }
  res.status(200).json({ task });
});